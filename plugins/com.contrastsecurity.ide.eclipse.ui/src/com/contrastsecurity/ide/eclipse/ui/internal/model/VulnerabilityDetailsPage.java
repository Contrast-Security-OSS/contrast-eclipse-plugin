/*******************************************************************************
 * Copyright (c) 2017 Contrast Security.
 * All rights reserved. 
 * 
 * This program and the accompanying materials are made available under 
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License.
 * 
 * The terms of the GNU GPL version 3 which accompanies this distribution
 * and is available at https://www.gnu.org/licenses/gpl-3.0.en.html
 * 
 * Contributors:
 *     Contrast Security - initial API and implementation
 *******************************************************************************/
package com.contrastsecurity.ide.eclipse.ui.internal.model;

import java.net.MalformedURLException;
import java.util.List;

import org.eclipse.jface.resource.ColorRegistry;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.ui.IWorkbenchPreferenceConstants;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;

import com.contrastsecurity.ide.eclipse.core.extended.Chapter;
import com.contrastsecurity.ide.eclipse.core.extended.PropertyResource;
import com.contrastsecurity.ide.eclipse.core.extended.Risk;
import com.contrastsecurity.ide.eclipse.core.extended.StoryResource;
import com.contrastsecurity.ide.eclipse.ui.ContrastUIActivator;
import com.contrastsecurity.ide.eclipse.ui.internal.views.VulnerabilitiesView;
import com.contrastsecurity.models.Trace;

public class VulnerabilityDetailsPage extends AbstractPage {

	private Label severityLabel;
	private Label nameLabel;
	private Button externalLinkButton;
	private Trace trace;
	private StoryResource story;
	private OverviewTab overviewTab;
	private EventsTab eventsTab;
	private HttpRequestTab httpRequestTab;

	public VulnerabilityDetailsPage(Composite parent, int style, VulnerabilitiesView vulnerabilitiesView) {
		super(parent, style, vulnerabilitiesView);
		setLayout(new GridLayout());
		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
		setLayoutData(gd);
		Composite comboComposite = new Composite(this, SWT.NONE);
		comboComposite.setLayout(new GridLayout(4, false));
		gd = new GridData(SWT.FILL, SWT.FILL, true, false);
		comboComposite.setLayoutData(gd);

		severityLabel = new Label(comboComposite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.FILL, false, false);
		severityLabel.setLayoutData(gd);

		nameLabel = new Label(comboComposite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.CENTER, false, false);
		nameLabel.setLayoutData(gd);

		externalLinkButton = new Button(comboComposite, SWT.PUSH);
		gd = new GridData(SWT.FILL, SWT.FILL, false, false);
		externalLinkButton.setLayoutData(gd);
		externalLinkButton.setImage(ContrastUIActivator.getImage("/icons/externalLink.png"));
		externalLinkButton.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					vulnerabilitiesView.openTraceInBrowser(trace);
				} catch (PartInitException | MalformedURLException e1) {
					ContrastUIActivator.log(e1);
				}
			}

		});
		Link backLink = new Link(comboComposite, SWT.NONE);
		gd = new GridData(SWT.END, SWT.FILL, true, false);
		backLink.setLayoutData(gd);
		backLink.setText("<a href=\"back.to.result\">Back To Results</a>");
		backLink.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if ("back.to.result".equals(e.text)) {
					getVulnerabilitiesView().showVulnerabilityPage();
				}
			}
		});

		CTabFolder folder = createTabFolder(this);

		CTabItem overviewTabItem = new CTabItem(folder, SWT.NONE);
		overviewTabItem.setText("Overview");
		overviewTab = new OverviewTab(folder, SWT.NONE);
		overviewTabItem.setControl(overviewTab);

		CTabItem eventsTabItem = new CTabItem(folder, SWT.NONE);
		eventsTabItem.setText("Events");
		eventsTab = new EventsTab(folder, SWT.NONE);
		eventsTabItem.setControl(eventsTab);

		CTabItem httpRequestTabItem = new CTabItem(folder, SWT.NONE);
		httpRequestTabItem.setText("HTTP Request");
		httpRequestTab = new HttpRequestTab(folder, SWT.NONE);
		httpRequestTabItem.setControl(httpRequestTab);
		folder.setSelection(overviewTabItem);
	}

	private CTabFolder createTabFolder(Composite parent) {
		CTabFolder folder = new CTabFolder(parent, SWT.NO_REDRAW_RESIZE | SWT.FLAT);
		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
		folder.setLayoutData(gd);
		ColorRegistry reg = JFaceResources.getColorRegistry();
		Color c1 = reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_BG_START"),
				c2 = reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_BG_END");
		folder.setSelectionBackground(new Color[] { c1, c2 }, new int[] { 100 }, true);
		folder.setSelectionForeground(reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_TEXT_COLOR"));
		folder.setSimple(
				PlatformUI.getPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS));
		folder.setBorderVisible(true);
		folder.setFont(parent.getFont());
		return folder;
	}

	public Label getSeverityLabel() {
		return severityLabel;
	}

	public Label getNameLabel() {
		return nameLabel;
	}

	public Button getExternalLinkLabel() {
		return externalLinkButton;
	}

	public Trace getTrace() {
		return trace;
	}

	public void setTrace(Trace trace) {
		this.trace = trace;
		if (trace != null) {
			getNameLabel().setText(trace.getTitle() == null ? "" : trace.getTitle());
			getSeverityLabel().setImage(ContrastUIActivator.getSeverityImage(trace));
		} else {
			getNameLabel().setText("?");
			getSeverityLabel().setImage(null);
		}
		getParent().layout(true, true);
		getParent().redraw();
	}

	public StoryResource getStory() {
		return story;
	}

	public void setStory(StoryResource story) {
		this.story = story;
		Composite control = overviewTab.getControl();
		Control[] children = control.getChildren();
		for (Control child : children) {
			child.dispose();
		}
		if (story != null && story.getStory() != null && story.getStory().getChapters() != null
				&& story.getStory().getChapters().size() > 0) {
			for (Chapter chapter : story.getStory().getChapters()) {
				String text = chapter.getIntroText() == null ? "" : chapter.getIntroText();
				String areaText = chapter.getBody() == null ? "" : chapter.getBody();
				if (areaText.isEmpty()) {
					List<PropertyResource> properties = chapter.getPropertyResources();
					if (properties != null && properties.size() > 0) {
						PropertyResource property = properties.get(0);
						areaText = property.getName() == null ? "" : property.getName();
					}
				}

				new Label(control, SWT.NONE);
				Label label = new Label(control, SWT.WRAP | SWT.LEFT);
				GridData gd = new GridData(SWT.HORIZONTAL, SWT.TOP, true, false, 1, 1);
				label.setLayoutData(gd);
				label.setText(text);
				new Label(control, SWT.NONE);

				if (!areaText.isEmpty()) {
					final StyledText textArea = new StyledText(control, SWT.WRAP);
					final int padding = 5;
					textArea.setLeftMargin(padding);
					textArea.setRightMargin(padding);
					textArea.setTopMargin(padding);
					textArea.setBottomMargin(padding);
					textArea.setWordWrap(true);
					textArea.setCaret(null);
					gd = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
					textArea.setLayoutData(gd);
					textArea.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
					textArea.setText(areaText);
					new Label(control, SWT.NONE);
				}
				if (story.getStory().getRisk() != null) {
					Risk risk = story.getStory().getRisk();
					String riskText = risk.getText() == null ? "" : risk.getText();
					if (!riskText.isEmpty()) {
						label = new Label(control, SWT.WRAP | SWT.LEFT);
						gd = new GridData(SWT.HORIZONTAL, SWT.TOP, true, false, 1, 1);
						label.setLayoutData(gd);
						label.setText(riskText);
						new Label(control, SWT.NONE);
					}
				}
			}
		}
	}

}
