/*******************************************************************************
 * Copyright (c) 2017 Contrast Security.
 * All rights reserved. 
 * 
 * This program and the accompanying materials are made available under 
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License.
 * 
 * The terms of the GNU GPL version 3 which accompanies this distribution
 * and is available at https://www.gnu.org/licenses/gpl-3.0.en.html
 * 
 * Contributors:
 *     Contrast Security - initial API and implementation
 *******************************************************************************/
package com.contrastsecurity.ide.eclipse.ui.internal.model;

import java.util.EnumSet;

import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;

import com.contrastsecurity.http.ServerFilterForm;
import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.ide.eclipse.core.ContrastCoreActivator;
import com.contrastsecurity.ide.eclipse.ui.ContrastUIActivator;
import com.contrastsecurity.ide.eclipse.ui.internal.views.VulnerabilitiesView;
import com.contrastsecurity.ide.eclipse.ui.util.UIElementUtils;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.Server;
import com.contrastsecurity.models.Servers;
import com.contrastsecurity.sdk.ContrastSDK;

public class VulnerabilityPage extends AbstractPage {
	private Label label;

	private Label pageLabel;
	private Combo pageCombo;

	private IPageLoaderListener pageLoaderListener;

	Servers retrievedServers = null;
	Applications retrievedApplications = null;
	IEclipsePreferences prefs = ContrastCoreActivator.getPreferences();
	TraceFilterForm currentTraceFilterForm;
	Button openFilterDialogButton;
	IFilterListener openFilterDialogButtonListener;

	public VulnerabilityPage(Composite parent, int style, VulnerabilitiesView vulnerabilitiesView) {
		super(parent, style, vulnerabilitiesView);
		setLayout(new GridLayout());
		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
		setLayoutData(gd);

		UIElementUtils.createLogoLabel(this, ContrastUIActivator.getImage("/icons/contrastLogo.png"));

		Composite comboComposite = new Composite(this, SWT.NONE);
		comboComposite.setLayout(new GridLayout(9, false));

		label = new Label(comboComposite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.CENTER, false, false);
		label.setLayoutData(gd);
		String orgUuid = getOrgUuid();

		getServers(orgUuid, true);
		getApplications(orgUuid, true, null);

		createPaginationUI(comboComposite);

		openFilterDialogButton = new Button(comboComposite, SWT.PUSH);
		openFilterDialogButton.setImage(ContrastUIActivator.getImage("/icons/filter.png"));

		openFilterDialogButton.addListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				openFilterDialogButtonListener.onFilterLoad(retrievedServers, retrievedApplications);
			}
		});

		createButton(comboComposite, "Note", SWT.TOGGLE);
		createButton(comboComposite, "Low", SWT.TOGGLE);
		createButton(comboComposite, "Medium", SWT.TOGGLE);
		createButton(comboComposite, "High", SWT.TOGGLE);
		createButton(comboComposite, "Critical", SWT.TOGGLE);

		// openFilterDialogButtonListener
	}

	private Button createButton(Composite composite, String text, int style) {
		Button button = new Button(composite, style);
		button.setText(text);
		return button;
	}

	private String getOrgUuid() {
		String orgUuid = null;
		try {
			orgUuid = ContrastCoreActivator.getSelectedOrganizationUuid();
		} catch (Exception e) {
			ContrastUIActivator.log(e);
		}
		return orgUuid;
	}

	private ContrastSDK getSdk() {
		return getVulnerabilitiesView().getSdk();
	}

	private void createPaginationUI(Composite composite) {
		GridData gd;

		pageLabel = new Label(composite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.CENTER, false, false);
		pageLabel.setLayoutData(gd);
		pageLabel.setText("Page: ");

		pageCombo = new Combo(composite, SWT.READ_ONLY);
		pageCombo.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				pageLoaderListener.onPageLoad(Integer.parseInt(pageCombo.getText()));
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				/* Does nothing */ }
		});
	}

	public void getServers(final String orgUuid, final boolean setSavedDefaults) {
		if (orgUuid != null) {
			try {
				ServerFilterForm serverFilterForm = new ServerFilterForm();
				serverFilterForm.setExpand(EnumSet.of(ServerFilterForm.ServerExpandValue.APPLICATIONS));
				retrievedServers = getSdk().getServers(orgUuid, serverFilterForm);

			} catch (Exception e) {
				ContrastUIActivator.log(e);
			}
		}
	}

	public void getApplications(final String orgUuid, final boolean setSavedDefaults, Server server) {

		if (orgUuid != null) {
			if (server == null) {
				try {
					retrievedApplications = getSdk().getApplications(orgUuid);
				} catch (Exception e) {
					ContrastUIActivator.log(e);
				}
			}
		}
	}

	public void initializePageCombo(final int pageLimit, final int totalElements) {
		if (totalElements > pageLimit) {
			int pages;

			if (totalElements % pageLimit > 0)
				pages = totalElements / pageLimit + 1;
			else
				pages = totalElements / pageLimit;

			String[] pagesArray = new String[pages];

			for (int i = 0; i < pages; i++)
				pagesArray[i] = String.valueOf(i + 1);

			pageCombo.setItems(pagesArray);
			pageCombo.setEnabled(true);
		} else {
			pageCombo.setItems(new String[] { "1" });
			pageCombo.setEnabled(false);
		}

		pageCombo.select(0);
	}

	public void setPageLoaderListener(final IPageLoaderListener pageLoaderListener) {
		this.pageLoaderListener = pageLoaderListener;
	}

	public Label getLabel() {
		return label;
	}

	public void setOpenFilterDialogButtonListener(IFilterListener openFilterDialogButtonListener) {
		this.openFilterDialogButtonListener = openFilterDialogButtonListener;
	}
}
