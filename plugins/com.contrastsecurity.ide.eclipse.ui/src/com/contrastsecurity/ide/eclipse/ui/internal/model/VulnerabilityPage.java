/*******************************************************************************
 * Copyright (c) 2017 Contrast Security.
 * All rights reserved. 
 * 
 * This program and the accompanying materials are made available under 
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License.
 * 
 * The terms of the GNU GPL version 3 which accompanies this distribution
 * and is available at https://www.gnu.org/licenses/gpl-3.0.en.html
 * 
 * Contributors:
 *     Contrast Security - initial API and implementation
 *******************************************************************************/
package com.contrastsecurity.ide.eclipse.ui.internal.model;

import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;

import com.contrastsecurity.http.ServerFilterForm;
import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.ide.eclipse.core.Constants;
import com.contrastsecurity.ide.eclipse.core.ContrastCoreActivator;
import com.contrastsecurity.ide.eclipse.ui.ContrastUIActivator;
import com.contrastsecurity.ide.eclipse.ui.internal.views.FilterDialog;
import com.contrastsecurity.ide.eclipse.ui.internal.views.VulnerabilitiesView;
import com.contrastsecurity.models.Application;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.Server;
import com.contrastsecurity.models.Servers;
import com.contrastsecurity.sdk.ContrastSDK;

public class VulnerabilityPage extends AbstractPage {

	private ComboViewer serverCombo;
	private ComboViewer applicationCombo;
	private Label label;

	private Label pageLabel;
	private Combo pageCombo;

	private IPageLoaderListener pageLoaderListener;
	
	Servers retrievedServers = null;
	Applications retrievedApplications = null;

	public VulnerabilityPage(Composite parent, int style, VulnerabilitiesView vulnerabilitiesView) {
		super(parent, style, vulnerabilitiesView);
		setLayout(new GridLayout());
		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
		setLayoutData(gd);
		Composite comboComposite = new Composite(this, SWT.NONE);
		comboComposite.setLayout(new GridLayout(6, false));

		label = new Label(comboComposite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.CENTER, false, false);
		label.setLayoutData(gd);
		String orgUuid = getOrgUuid();

		createServerCombo(comboComposite, orgUuid);
		updateServerCombo(orgUuid, true);
		createApplicationCombo(comboComposite, orgUuid);
		updateApplicationCombo(orgUuid, true, null);
		
		createPaginationUI(comboComposite);

		Listener openFilterDialogButtonListener = new Listener() {
			public void handleEvent(Event e) {
				switch (e.type) {
				case SWT.Selection:
					if (retrievedServers != null && retrievedApplications != null) {
						FilterDialog filterDialog = new FilterDialog(parent.getShell(), getSdk(), retrievedServers, retrievedApplications);
						filterDialog.create();
						filterDialog.open();
						filterDialog.getTraceFilterForm();
					}

					break;
				}
			}
		};

		Button openFilterDialogButton = new Button(comboComposite, SWT.PUSH);
		openFilterDialogButton.setImage(ContrastUIActivator.getImage("/icons/filter.png"));
		openFilterDialogButton.addListener(SWT.Selection, openFilterDialogButtonListener);

	}

	private String getOrgUuid() {
		String orgUuid = null;
		try {
			orgUuid = ContrastCoreActivator.getSelectedOrganizationUuid();
		} catch (Exception e) {
			ContrastUIActivator.log(e);
		}
		return orgUuid;
	}

	private void createApplicationCombo(Composite composite, String orgUuid) {
		applicationCombo = new ComboViewer(composite, SWT.READ_ONLY);
		applicationCombo.getControl().setFont(composite.getFont());
		applicationCombo.setLabelProvider(new ContrastLabelProvider());
		applicationCombo.setContentProvider(new ArrayContentProvider());
	}

	private ContrastSDK getSdk() {
		return getVulnerabilitiesView().getSdk();
	}

	private void createServerCombo(Composite composite, String orgUuid) {
		serverCombo = new ComboViewer(composite, SWT.READ_ONLY);
		serverCombo.getControl().setFont(composite.getFont());
		serverCombo.setLabelProvider(new ContrastLabelProvider());
		serverCombo.setContentProvider(new ArrayContentProvider());
	}

	private void createPaginationUI(Composite composite) {
		GridData gd;

		pageLabel = new Label(composite, SWT.NONE);
		gd = new GridData(SWT.FILL, SWT.CENTER, false, false);
		pageLabel.setLayoutData(gd);
		pageLabel.setText("Page: ");

		pageCombo = new Combo(composite, SWT.READ_ONLY);
		pageCombo.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				pageLoaderListener.onPageLoad(Integer.parseInt(pageCombo.getText()));
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				/* Does nothing */ }
		});
	}

	public void updateServerCombo(final String orgUuid, final boolean setSavedDefaults) {
		Set<ServerUIAdapter> contrastServers = new LinkedHashSet<>();
		int count = 0;
		if (orgUuid != null) {
			Servers servers = null;
			try {
				ServerFilterForm serverFilterForm = new ServerFilterForm();
	            serverFilterForm.setExpand(EnumSet.of(ServerFilterForm.ServerExpandValue.APPLICATIONS));
				servers = getSdk().getServers(orgUuid, serverFilterForm);	
				retrievedServers = servers;
				
			} catch (Exception e) {
				ContrastUIActivator.log(e);
			}
			if (servers != null && servers.getServers() != null) {
				for (Server server : servers.getServers()) {
					ServerUIAdapter contrastServer = new ServerUIAdapter(server, server.getName());
					contrastServers.add(contrastServer);
					count++;
				}
			}
		}
		ServerUIAdapter allServers = new ServerUIAdapter(null, "All Servers(" + count + ")");
		contrastServers.add(allServers);
		serverCombo.setInput(contrastServers);

		if (setSavedDefaults) {
			IEclipsePreferences prefs = ContrastCoreActivator.getPreferences();
			long serverId = prefs.getLong(Constants.SERVER_ID, Constants.ALL_SERVERS);
			ServerUIAdapter selected = allServers;
			for (ServerUIAdapter adapter : contrastServers) {
				if (serverId == adapter.getId()) {
					selected = adapter;
					break;
				}
			}
			serverCombo.setSelection(new StructuredSelection(selected));
		}
	}
	
	public void updateApplicationCombo(final String orgUuid, final boolean setSavedDefaults, Server server) {
		
		Set<ApplicationUIAdapter> contrastApplications = new LinkedHashSet<>();
		int count = 0;
		if (orgUuid != null) {
			List<Application> applications = null;
			if (server == null) {
				try {
					Applications apps = getSdk().getApplications(orgUuid);
					applications = apps.getApplications();
					retrievedApplications = apps;
					
				} catch (Exception e) {
					ContrastUIActivator.log(e);
				}	
			} else {
				applications = server.getApplications();
			}
			
			if (applications != null && !applications.isEmpty()) {
				for (Application application : applications) {
					ApplicationUIAdapter app = new ApplicationUIAdapter(application, application.getName());
					contrastApplications.add(app);
					count++;
					ContrastUIActivator.logInfo(application.getName());
				}
			}
		}
		ApplicationUIAdapter allApplications = new ApplicationUIAdapter(null, "All Applications(" + count + ")");
		contrastApplications.add(allApplications);
		applicationCombo.setInput(contrastApplications);

		if (setSavedDefaults) {
			IEclipsePreferences prefs = ContrastCoreActivator.getPreferences();
			String appId = prefs.get(Constants.APPLICATION_ID, Constants.ALL_APPLICATIONS);
			ApplicationUIAdapter selected = allApplications;
			for (ApplicationUIAdapter adapter : contrastApplications) {
				if (appId.equals(adapter.getId())) {
					selected = adapter;
					break;
				}
			}
			applicationCombo.setSelection(new StructuredSelection(selected));
		}
	}

	public void initializePageCombo(final int pageLimit, final int totalElements) {
		if (totalElements > pageLimit) {
			int pages;

			if (totalElements % pageLimit > 0)
				pages = totalElements / pageLimit + 1;
			else
				pages = totalElements / pageLimit;

			String[] pagesArray = new String[pages];

			for (int i = 0; i < pages; i++)
				pagesArray[i] = String.valueOf(i + 1);

			pageCombo.setItems(pagesArray);
			pageCombo.setEnabled(true);
		} else {
			pageCombo.setItems(new String[] { "1" });
			pageCombo.setEnabled(false);
		}

		pageCombo.select(0);
	}

	public void setPageLoaderListener(final IPageLoaderListener pageLoaderListener) {
		this.pageLoaderListener = pageLoaderListener;
	}

	public ComboViewer getServerCombo() {
		return serverCombo;
	}

	public ComboViewer getApplicationCombo() {
		return applicationCombo;
	}

	public Label getLabel() {
		return label;
	}
	
//    private TraceFilterForm getTraceFilterFormFromContrastFilterPersistentStateComponent() {
//
//        TraceFilterForm traceFilterForm = null;
//
//        Long serverId = Constants.ALL_SERVERS;
//        String appId = Constants.ALL_APPLICATIONS;
//
//        if (contrastFilterPersistentStateComponent.getSelectedServerUuid() != null) {
//            serverId = contrastFilterPersistentStateComponent.getSelectedServerUuid();
//        }
//        if (contrastFilterPersistentStateComponent.getSelectedApplicationId() != null) {
//            appId = contrastFilterPersistentStateComponent.getSelectedApplicationId();
//        }
//
//        int offset = contrastFilterPersistentStateComponent.getCurrentOffset();
//
//        if (serverId == Constants.ALL_SERVERS && Constants.ALL_APPLICATIONS.equals(appId)) {
//            traceFilterForm = Util.getTraceFilterForm(offset, PAGE_LIMIT);
//        } else if (serverId == Constants.ALL_SERVERS && !Constants.ALL_APPLICATIONS.equals(appId)) {
//            traceFilterForm = Util.getTraceFilterForm(offset, PAGE_LIMIT);
//        } else if (serverId != Constants.ALL_SERVERS && Constants.ALL_APPLICATIONS.equals(appId)) {
//            traceFilterForm = Util.getTraceFilterForm(serverId, offset, PAGE_LIMIT);
//        } else if (serverId != Constants.ALL_SERVERS && !Constants.ALL_APPLICATIONS.equals(appId)) {
//            traceFilterForm = Util.getTraceFilterForm(serverId, offset, PAGE_LIMIT);
//        }
//        if (contrastFilterPersistentStateComponent.getSeverities() != null && !contrastFilterPersistentStateComponent.getSeverities().isEmpty()) {
//            traceFilterForm.setSeverities(getRuleSeveritiesEnumFromList(contrastFilterPersistentStateComponent.getSeverities()));
//        }
//
//        if (contrastFilterPersistentStateComponent.getLastDetectedFrom() != null) {
//            LocalDateTime localDateTimeFrom = getLocalDateTimeFromMillis(contrastFilterPersistentStateComponent.getLastDetectedFrom());
//            traceFilterForm.setStartDate(getDateFromLocalDateTime(localDateTimeFrom));
//        }
//
//        if (contrastFilterPersistentStateComponent.getLastDetectedTo() != null) {
//            LocalDateTime localDateTimeTo = getLocalDateTimeFromMillis(contrastFilterPersistentStateComponent.getLastDetectedTo());
//            traceFilterForm.setEndDate(getDateFromLocalDateTime(localDateTimeTo));
//        }
//        if (contrastFilterPersistentStateComponent.getStatuses() != null && !contrastFilterPersistentStateComponent.getStatuses().isEmpty()) {
//            traceFilterForm.setStatus(contrastFilterPersistentStateComponent.getStatuses());
//        }
//        if (contrastFilterPersistentStateComponent.getCurrentOffset() != 0) {
//            traceFilterForm.setOffset(contrastFilterPersistentStateComponent.getCurrentOffset());
//        }
//
//        if (contrastFilterPersistentStateComponent.getSort() != null) {
//            traceFilterForm.setSort(contrastFilterPersistentStateComponent.getSort());
//        } else {
//            traceFilterForm.setSort(Constants.SORT_DESCENDING + Constants.SORT_BY_SEVERITY);
//        }
//        traceFilterForm.setExpand(EnumSet.of(TraceFilterForm.TraceExpandValue.APPLICATION));
//
//        return traceFilterForm;
//    }
    
	private Long getSelectedServerId() {
		ISelection sel = serverCombo.getSelection();
		if (sel instanceof IStructuredSelection) {
			Object element = ((IStructuredSelection) sel).getFirstElement();
			if (element instanceof ServerUIAdapter) {
				return ((ServerUIAdapter) element).getId();
			}
		}
		return Constants.ALL_SERVERS;
	}

	private String getSelectedAppId() {
		ISelection sel = applicationCombo.getSelection();
		if (sel instanceof IStructuredSelection) {
			Object element = ((IStructuredSelection) sel).getFirstElement();
			if (element instanceof ApplicationUIAdapter) {
				return ((ApplicationUIAdapter) element).getId();
			}
		}
		return Constants.ALL_APPLICATIONS;
	}

}
