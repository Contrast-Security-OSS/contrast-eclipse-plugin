package com.contrastsecurity.ide.eclipse.ui.test;

import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.junit.Before;
import org.junit.Test;

import com.contrastsecurity.exceptions.UnauthorizedException;
import com.contrastsecurity.http.TraceFilterForm;
import com.contrastsecurity.ide.eclipse.core.Constants;
import com.contrastsecurity.ide.eclipse.core.ContrastCoreActivator;
import com.contrastsecurity.ide.eclipse.core.extended.ExtendedContrastSDK;
import com.contrastsecurity.models.Application;
import com.contrastsecurity.models.Applications;
import com.contrastsecurity.models.Server;
import com.contrastsecurity.models.Servers;
import com.contrastsecurity.models.Trace;
import com.contrastsecurity.models.Traces;

public class VulnerabilityTest {
	/**
	 * Team server username. Required to run any events test.
	 */
	private final static String USERNAME = "$user_name";
	/**
	 * Team server organization API key. Required to run any events test.
	 */
	private final static String API_KEY = "$api_key";
	/**
	 * Team server organization service key. Required to run any events test.
	 */
	private final static String SERVICE_KEY = "$service_key";
	/**
	 * Team server API URL. Required to run any events test.
	 */
	private final static String REST_API_URL = "https://$domain/Contrast/api";

	/**
	 * Organization UUID. Required to run when testing retrieval of an event.
	 */
	private final static String ORGANIZATION_UUID = "$org_UUID";

	ExtendedContrastSDK sdk;

	@Before
	public void init() {
		IEclipsePreferences prefs = ContrastCoreActivator.getPreferences();
		prefs.put(Constants.USERNAME, USERNAME);
		prefs.put(Constants.API_KEY, API_KEY);
		prefs.put(Constants.SERVICE_KEY, SERVICE_KEY);
		prefs.put(Constants.TEAM_SERVER_URL, REST_API_URL);
		sdk = ContrastCoreActivator.getContrastSDK();
	}

	private TraceFilterForm getServerTraceForm(Long selectedServerId) {
		TraceFilterForm form = new TraceFilterForm();
		List<Long> serverIds = new ArrayList<>();
		serverIds.add(selectedServerId);
		form.setServerIds(serverIds);
		return form;
	}

	@Test
	public void getAllTracesTest() throws UnauthorizedException, IOException {
		Traces traces = sdk.getTracesInOrg(ORGANIZATION_UUID, null);
		assertTrue(!traces.getTraces().isEmpty());
	}

	@Test
	public void getTracesForEachApplicationTest() throws UnauthorizedException, IOException {

		Applications applications = sdk.getApplications(ORGANIZATION_UUID);
		assertTrue(!applications.getApplications().isEmpty());

		for (Application application : applications.getApplications()) {
			Traces traces = sdk.getTraces(ORGANIZATION_UUID, application.getId(), null);
			for (Trace trace : traces.getTraces()) {
				assertTrue(trace.getTitle().length() > 0);
			}

		}
	}

	@Test
	public void getTracesWithFilter() throws IOException, UnauthorizedException {
		Servers servers = sdk.getServers(ORGANIZATION_UUID, null);
		for (Server server : servers.getServers()) {

			TraceFilterForm form = getServerTraceForm(server.getServerId());
			Traces traces = sdk.getTracesInOrg(ORGANIZATION_UUID, form);

			if (traces.getCount() > 0) {
				for (Trace trace : traces.getTraces()) {
					assertTrue(trace.getTitle().length() > 0);
				}
			}
		}
	}
}
